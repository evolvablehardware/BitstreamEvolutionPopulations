; This is a simple starter dive into using BitstreamEvolution through the simulation modes
; In the simulation mode configured here, the population will consist of actual bitstreams for the FPGA. They will be compiled but, instead of uploading them, we will simply sum up the bytes in the file as a simple simulation
; We can use this to explore the nature of populations that use these bitstream files. For example, determining what mutation rates seem to give the best results. Mutations are performed per-bit, so we want to use this mode since the bitstream is of the same length as the one we'd use for experiments with evolvable hardware
; The fitnesses will be very large (in the tens of thousands), not like what we'd see with true EHW experiments.
; It may be difficult to get evolution going initially; I've typically used this mode to verify the functionality of mutation and crossover, so it has not been used in the way we've set it up for here. There's no right answers, we don't know what to expect either.
; Here, the simulation mode is set, the 3 parameters to test out are immediately below
; It will be interesting to see how ideal configurations of these parameters for sim modes compares to the ones we use. These are the less likely ones to be very different (for example, elitism is very important in evolvable hardware but in this sim mode, doesn't necessarily need to happen. So we've set it to a default and assume that the ideal elitism fraction for this sim mode is not representative of the ideal sim mode for true experiments)

[GA PARAMETERS]
; See what configuration of these seems to work best
mutation_probability = 0.0
crossover_probability = 0.0
population_size = 5

; Options:	SINGLE_ELITE (top individual is an elite)
;			FRAC_ELITE (uses the elitism_fraction to determine number of elites)
;			CLASSIC_TOURN (runs a classic tournament)
;			FIT_PROP_SEL (fitness-proportional selection)
;			RANK_PROP_SEL (rank-proportional selection)
;			MAP_ELITES (MAP-elites inspired method, maps waveforms to a grid and copies/mutates the best in each cell for the next generation) - not defined for SIM_HARDWARE or PULSE measurement
selection = FIT_PROP_SEL
; Options:	PULSE (until pulses detected)
;			VARIANCE (until variance crosses certain threshold)
;			NO (no randomization, just begin evolution immediately)
elitism_fraction = 0.1
; Options:	HAMMING_DIST (uses the average Hamming distance as the diversity measure)
;			UNIQUE (uses the count of unique individuals as the diversity measure)
diversity_measure = HAMMING_DIST
random_injection = 0.0

[TOP-LEVEL PARAMETERS]
simulation_mode = SIM_HARDWARE

[FITNESS PARAMETERS]
; Options:	VARIANCE (uses the variance fitness function)
;			PULSE_COUNT (uses the pulse count fitness function)
;			COMBINED (uses variance and closeness to trigger voltage)
; This is independent of the data measured from the MCU, and only defines how that data should be handled
fitness_func = VARIANCE
desired_freq = 10000
; Options:  ADD (adds the two fitness measures together with weighting)
;			MULT (multiplies the two fitness measures together)
fitness_mode = ADD
pulse_weight = 10
var_weight = 1

[INITIALIZATION PARAMETERS]
; Options:	CLONE_SEED (clones the seed hardware to every individual in the population) - not defined for FULLY_SIM
;			CLONE_SEED_MUTATE (clones the seed hardware to every indvidual, and then mutates each of them) - not defined for FULLY_SIM
;			RANDOM (completely randomizes the [modifiable] bitstream of all individuals)
;			EXISTING_POPULATION (uses the existing population as-is) - not defined for FULLY_SIM
init_mode = RANDOM
; Options:	PULSE (until pulses detected)
;			VARIANCE (until variance crosses certain threshold)
;			NO (no randomization, just begin evolution immediately)
randomize_until = NO
randomize_threshold = 4

[STOPPING CONDITION PARAMETERS]
; Can provide a value or IGNORE for generations & target_fitness
; If IGNORE is provided, will not take target fitness/# generations into account
; Will stop when it reaches one of these; whichever comes first
; If both are set to IGNORE, then evolution will run until the user forces it to stop
generations = 500
target_fitness = IGNORE

[LOGGING PARAMETERS]
; Log Level varies from 0-4
; Higher log level = more detailed logs
; Log level 0 shows no logs
log_level = 4
save_log = true
save_plots = true
log_file = ./workspace/log
plots_dir = ./workspace/plots
asc_dir = ./workspace/experiment_asc
bin_dir = ./workspace/experiment_bin
data_dir = ./workspace/experiment_data
analysis = ./workspace/analysis
best_file = ./workspace/best.asc
; Source Populations:
; Looks for subdirectories in src_populations_dir
; For every subdirectory, includes some percentage of that population in the final population (i.e. if 5 subdirectories, each contributes 20%)
src_populations_dir = ./workspace/source_populations
datetime_format = %%m/%%d/%%Y - %%H:%%M:%%S

[SYSTEM PARAMETERS]
fpga = i:0x0403:0x6010:0
usb_path = /dev/ttyUSB0

[HARDWARE PARAMETERS]
; Options:	MOORE
;			NEWSE
routing = MOORE
mcu_read_timeout = 1.1
serial_baud = 115200
accessed_columns = 14,15,24,25,40,41

