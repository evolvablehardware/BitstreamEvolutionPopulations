; Here we'll just look at one parameter: random injection. This setting will take the bottom X% of the population and replace them with random individuals at the end of each generation
; This is to promote diversity, but in practice we aren't sure how useful this setting is.
; See how different values of random injection affect the result. Remember you may want to run the same experiment multiple times to make sure the result you find isn't due to randomness, but actually indicates something about the parameters that have been set.
; See if no injection has a different result than some low injection.
; This value is a percent but as a decimal, so 0.15 = 15%.
; We'd like to run a similar experiment using the FPGAs at some point. It may be useful in the sim mode, but with FPGAs we believe it may not be helping due to the vast majority of random circuits being useless.

[GA PARAMETERS]
random_injection = 0.0

population_size = 50
mutation_probability = 0.0021
crossover_probability = 0.7
; Options:	SINGLE_ELITE (top individual is an elite)
;			FRAC_ELITE (uses the elitism_fraction to determine number of elites)
;			CLASSIC_TOURN (runs a classic tournament)
;			FIT_PROP_SEL (fitness-proportional selection)
;			RANK_PROP_SEL (rank-proportional selection)
;			MAP_ELITES (MAP-elites inspired method, maps waveforms to a grid and copies/mutates the best in each cell for the next generation) - not defined for SIM_HARDWARE or PULSE measurement
selection = FIT_PROP_SEL
elitism_fraction = 0.1
; Options:	HAMMING_DIST (uses the average Hamming distance as the diversity measure)
;			UNIQUE (uses the count of unique individuals as the diversity measure)
diversity_measure = HAMMING_DIST

[TOP-LEVEL PARAMETERS]
simulation_mode = FULLY_SIM

[FITNESS PARAMETERS]
; Options:	VARIANCE (uses the variance fitness function)
;			PULSE_COUNT (uses the pulse count fitness function)
;			COMBINED (uses variance and closeness to trigger voltage)
; This is independent of the data measured from the MCU, and only defines how that data should be handled
fitness_func = VARIANCE
desired_freq = 10000
; Options:  ADD (adds the two fitness measures together with weighting)
;			MULT (multiplies the two fitness measures together)
combined_mode = ADD
pulse_weight = 10
var_weight = 1

[INITIALIZATION PARAMETERS]
; Options:	CLONE_SEED (clones the seed hardware to every individual in the population) - not defined for FULLY_SIM
;			CLONE_SEED_MUTATE (clones the seed hardware to every indvidual, and then mutates each of them) - not defined for FULLY_SIM
;			RANDOM (completely randomizes the [modifiable] bitstream of all individuals)
;			EXISTING_POPULATION (uses the existing population as-is) - not defined for FULLY_SIM
init_mode = RANDOM
; Options:	PULSE (until pulses detected)
;			VARIANCE (until variance crosses certain threshold)
;			NO (no randomization, just begin evolution immediately)
randomize_until = NO
randomize_threshold = 4

[STOPPING CONDITION PARAMETERS]
; Can provide a value or IGNORE for generations & target_fitness
; If IGNORE is provided, will not take target fitness/# generations into account
; Will stop when it reaches one of these; whichever comes first
; If both are set to IGNORE, then evolution will run until the user forces it to stop
generations = 500
target_fitness = IGNORE

[LOGGING PARAMETERS]
; Log Level varies from 0-4
; Higher log level = more detailed logs
; Log level 0 shows no logs
log_level = 4
save_log = true
save_plots = true
log_file = ./workspace/log
plots_dir = ./workspace/plots
asc_dir = ./workspace/experiment_asc
bin_dir = ./workspace/experiment_bin
data_dir = ./workspace/experiment_data
analysis = ./workspace/analysis
best_file = ./workspace/best.asc
; Source Populations:
; Looks for subdirectories in src_populations_dir
; For every subdirectory, includes some percentage of that population in the final population (i.e. if 5 subdirectories, each contributes 20%)
src_populations_dir = ./workspace/source_populations
datetime_format = %%m/%%d/%%Y - %%H:%%M:%%S

[SYSTEM PARAMETERS]
fpga = i:0x0403:0x6010:0
usb_path = /dev/ttyUSB0

[HARDWARE PARAMETERS]
; Options:	MOORE
;			NEWSE
routing = MOORE
mcu_read_timeout = 1.1
serial_baud = 115200
accessed_columns = 14,15,24,25,40,41

