; This sim mode generates waveforms in theoretically the same range the FPGA can
; It does this by pre-creating 100 random sine functions (in the form of A*sin(Bx+C)+D, where A/B/C/D are randomly set within specified ranges) that are used throughout the whole experiment (sine wave 1 will ALWAYS have the same A/B/C/D values during a particular experiment's run)
; Each individual has a 100-bit bitstream, with each bit determining if that particular sine function is "on" or "off". All the "on" ones are summed up for the final waveform
; We can then use the variance fitness function to evaluate these waveforms like we would an FPGA-produced waveform
; One thing you can try is seeing how the different selection methods work; which one seems to lead to the highest fitness over the allotted 500 generations?
; The MAP_ELITES selection method is different in that it aims to achieve high diversity, through promoting diverse outcomes. It will generate an additional plot when selected. Compare diversity from this method to the diversity in other methods
; You can also see how the elitism_fraction will change things, though note that it is less necessary in this simulation mode than in real circuits. However, single bit flips can still have large consequences in this mode (for example, turning on a waveform that cancels out the existing one).

[GA PARAMETERS]
; Options:	SINGLE_ELITE (top individual is an elite)
;			FRAC_ELITE (uses the elitism_fraction to determine number of elites)
;			CLASSIC_TOURN (runs a classic tournament)
;			FIT_PROP_SEL (fitness-proportional selection)
;			RANK_PROP_SEL (rank-proportional selection)
;			MAP_ELITES (MAP-elites inspired method, maps waveforms to a grid and copies/mutates the best in each cell for the next generation) - not defined for SIM_HARDWARE or PULSE measurement
selection = FIT_PROP_SEL
elitism_fraction = 0.1

population_size = 50
mutation_probability = 0.0021
crossover_probability = 0.7
; Options:	HAMMING_DIST (uses the average Hamming distance as the diversity measure)
;			UNIQUE (uses the count of unique individuals as the diversity measure)
diversity_measure = HAMMING_DIST
random_injection = 0.0

[TOP-LEVEL PARAMETERS]
simulation_mode = FULLY_SIM

[FITNESS PARAMETERS]
; Options:	VARIANCE (uses the variance fitness function)
;			PULSE_COUNT (uses the pulse count fitness function)
;			COMBINED (uses variance and closeness to trigger voltage)
; This is independent of the data measured from the MCU, and only defines how that data should be handled
fitness_func = VARIANCE
desired_freq = 10000
; Options:  ADD (adds the two fitness measures together with weighting)
;			MULT (multiplies the two fitness measures together)
combined_mode = ADD
pulse_weight = 10
var_weight = 1

[INITIALIZATION PARAMETERS]
; Options:	CLONE_SEED (clones the seed hardware to every individual in the population) - not defined for FULLY_SIM
;			CLONE_SEED_MUTATE (clones the seed hardware to every indvidual, and then mutates each of them) - not defined for FULLY_SIM
;			RANDOM (completely randomizes the [modifiable] bitstream of all individuals)
;			EXISTING_POPULATION (uses the existing population as-is) - not defined for FULLY_SIM
init_mode = RANDOM
; Options:	PULSE (until pulses detected)
;			VARIANCE (until variance crosses certain threshold)
;			NO (no randomization, just begin evolution immediately)
randomize_until = NO
randomize_threshold = 4

[STOPPING CONDITION PARAMETERS]
; Can provide a value or IGNORE for generations & target_fitness
; If IGNORE is provided, will not take target fitness/# generations into account
; Will stop when it reaches one of these; whichever comes first
; If both are set to IGNORE, then evolution will run until the user forces it to stop
generations = 500
target_fitness = IGNORE

[LOGGING PARAMETERS]
; Log Level varies from 0-4
; Higher log level = more detailed logs
; Log level 0 shows no logs
log_level = 4
save_log = true
save_plots = true
log_file = ./workspace/log
plots_dir = ./workspace/plots
asc_dir = ./workspace/experiment_asc
bin_dir = ./workspace/experiment_bin
data_dir = ./workspace/experiment_data
analysis = ./workspace/analysis
best_file = ./workspace/best.asc
; Source Populations:
; Looks for subdirectories in src_populations_dir
; For every subdirectory, includes some percentage of that population in the final population (i.e. if 5 subdirectories, each contributes 20%)
src_populations_dir = ./workspace/source_populations
datetime_format = %%m/%%d/%%Y - %%H:%%M:%%S

[SYSTEM PARAMETERS]
fpga = i:0x0403:0x6010:0
usb_path = /dev/ttyUSB0

[HARDWARE PARAMETERS]
; Options:	MOORE
;			NEWSE
routing = MOORE
mcu_read_timeout = 1.1
serial_baud = 115200
accessed_columns = 14,15,24,25,40,41

